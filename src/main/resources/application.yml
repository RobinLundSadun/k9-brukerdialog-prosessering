no.nav.security.jwt:
  client:
    registration:
      azure-k9-joark:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${K9_JOARK_SCOPE}
        authentication:
          client-auth-method: private_key_jwt
          client-id: ${AZURE_APP_CLIENT_ID}
          client-jwk: ${AZURE_APP_JWK}
      azure-k9-mellomlagring:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${K9_MELLOMLAGRING_SCOPE}
        authentication:
          client-auth-method: private_key_jwt
          client-id: ${AZURE_APP_CLIENT_ID}
          client-jwk: ${AZURE_APP_JWK}

spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    client-id: ${HOSTNAME}
    listener:
      ack-mode: record

    retry:
      topic:
        enabled: true
        attempts: 3 # Max int
        backoff: 1000 # 1 sekund
        max-backoff: 60000 # 1 minutt

    consumer:
      group-id: ${SPRING_APPLICATION_NAME}
      max-poll-records: 1
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        enable.auto.commit: true
        isolation.level: read_committed
        retry.backoff.ms: 2000
        reconnect.backoff.ms: 2000

    producer:
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        max.block.ms: 2000
        enable.idempotence: true
        max.in.flight.requests.per.connection: 1

    properties:
      schema:
        registry:
          url: ${SCHEMA_REGISTRY_URL}
          basic:
            auth:
              credentials:
                source: USER_INFO
              username: ${KAFKA_SCHEMA_REGISTRY_USER}
              password: ${KAFKA_SCHEMA_REGISTRY_PASSWORD}
